name: Kubernetes Deployment

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_NAMESPACE: ml-pipeline

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push trainer image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        no-cache: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/trainer:latest
        build-args: |
          SERVICE=trainer

    - name: Build and push evaluator image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        no-cache: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/evaluator:latest
        build-args: |
          SERVICE=evaluator

    - name: Build and push explainer image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        no-cache: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/explainer:latest
        build-args: |
          SERVICE=explainer

    - name: Build and push dashboard image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        no-cache: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:latest
        build-args: |
          SERVICE=dashboard

    # üíæ Clean up Docker to free space
    - name: Clean up Docker cache
      run: |
        docker system prune -af

    # ‚öôÔ∏è K8s: Install and configure kubectl
    - name: Install and configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes credentials
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        context: default

    - name: Create namespace if it doesn't exist
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Generate Kubernetes manifests
      run: |
        mkdir -p k8s && cat <<EOF > k8s/kubernetes-manifests.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: trainer-job
  namespace: ${KUBE_NAMESPACE}
spec:
  template:
    spec:
      containers:
      - name: trainer
        image: ${REGISTRY}/${IMAGE_NAME}/trainer:latest
      restartPolicy: Never
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: evaluator
  namespace: ${KUBE_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: evaluator
  template:
    metadata:
      labels:
        app: evaluator
    spec:
      containers:
      - name: evaluator
        image: ${REGISTRY}/${IMAGE_NAME}/evaluator:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: explainer
  namespace: ${KUBE_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: explainer
  template:
    metadata:
      labels:
        app: explainer
    spec:
      containers:
      - name: explainer
        image: ${REGISTRY}/${IMAGE_NAME}/explainer:latest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  namespace: ${KUBE_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      labels:
        app: dashboard
    spec:
      containers:
      - name: dashboard
        image: ${REGISTRY}/${IMAGE_NAME}/dashboard:latest
EOF

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/kubernetes-manifests.yaml

    - name: Wait for trainer job to complete
      run: |
        kubectl wait --for=condition=complete --timeout=300s job/trainer-job -n ${{ env.KUBE_NAMESPACE }} || true

    - name: Verify deployments
      run: |
        kubectl get jobs -n ${{ env.KUBE_NAMESPACE }}
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        kubectl get services -n ${{ env.KUBE_NAMESPACE }}
