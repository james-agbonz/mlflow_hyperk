name: Kubernetes Deployment

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_NAMESPACE: ml-pipeline

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    # Build and push all component images
    - name: Build and push trainer image
      uses: docker/build-push-action@v4
      with:
        context: ./trainer
        file: ./trainer/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/trainer:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push evaluator image
      uses: docker/build-push-action@v4
      with:
        context: ./evaluator
        file: ./evaluator/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/evaluator:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push explainer image
      uses: docker/build-push-action@v4
      with:
        context: ./explainer
        file: ./explainer/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/explainer:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push dashboard image
      uses: docker/build-push-action@v4
      with:
        context: ./dashboard
        file: ./dashboard/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Set up kubectl
    - name: Install and configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
      id: install
    
    - name: Configure Kubernetes credentials
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        context: default
      
    - name: Create namespace if it doesn't exist
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    # Generate Kubernetes manifest files
    - name: Generate Kubernetes manifests
      run: |
        cat <<EOF > kubernetes-manifests.yaml
        ---
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: trainer-job
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          template:
            metadata:
              labels:
                app: trainer
            spec:
              containers:
              - name: trainer
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/trainer:latest
                resources:
                  limits:
                    memory: "2Gi"
                    cpu: "1"
                  requests:
                    memory: "1Gi"
                    cpu: "0.5"
                volumeMounts:
                - name: data-volume
                  mountPath: /app/data
                env:
                - name: MLFLOW_TRACKING_URI
                  value: "http://mlflow:5000"
              volumes:
              - name: data-volume
                persistentVolumeClaim:
                  claimName: ml-data-pvc
              restartPolicy: Never
          backoffLimit: 1
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: evaluator
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: evaluator
          template:
            metadata:
              labels:
                app: evaluator
            spec:
              containers:
              - name: evaluator
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/evaluator:latest
                ports:
                - containerPort: 8000
                volumeMounts:
                - name: data-volume
                  mountPath: /app/data
                env:
                - name: MLFLOW_TRACKING_URI
                  value: "http://mlflow:5000"
              volumes:
              - name: data-volume
                persistentVolumeClaim:
                  claimName: ml-data-pvc
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: evaluator-service
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          selector:
            app: evaluator
          ports:
          - port: 80
            targetPort: 8000
          type: ClusterIP
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: explainer
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: explainer
          template:
            metadata:
              labels:
                app: explainer
            spec:
              containers:
              - name: explainer
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/explainer:latest
                ports:
                - containerPort: 8000
                volumeMounts:
                - name: data-volume
                  mountPath: /app/data
                env:
                - name: MLFLOW_TRACKING_URI
                  value: "http://mlflow:5000"
              volumes:
              - name: data-volume
                persistentVolumeClaim:
                  claimName: ml-data-pvc
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: explainer-service
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          selector:
            app: explainer
          ports:
          - port: 80
            targetPort: 8000
          type: ClusterIP
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: dashboard
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: dashboard
          template:
            metadata:
              labels:
                app: dashboard
            spec:
              containers:
              - name: dashboard
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:latest
                ports:
                - containerPort: 8050
                env:
                - name: EVALUATOR_URL
                  value: "http://evaluator-service"
                - name: EXPLAINER_URL
                  value: "http://explainer-service"
                - name: MLFLOW_TRACKING_URI
                  value: "http://mlflow:5000"
                volumeMounts:
                - name: data-volume
                  mountPath: /app/data
              volumes:
              - name: data-volume
                persistentVolumeClaim:
                  claimName: ml-data-pvc
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: dashboard-service
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          selector:
            app: dashboard
          ports:
          - port: 80
            targetPort: 8050
          type: LoadBalancer
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: ml-data-pvc
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 10Gi
        EOF
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f kubernetes-manifests.yaml
        
    - name: Run trainer job
      run: |
        kubectl wait --for=condition=complete --timeout=300s job/trainer-job -n ${{ env.KUBE_NAMESPACE }} || true
        
    - name: Verify deployments
      run: |
        kubectl get jobs -n ${{ env.KUBE_NAMESPACE }}
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        kubectl get services -n ${{ env.KUBE_NAMESPACE }}
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
